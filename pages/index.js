import { useState } from "react";
import Head from "next/head";

import Navbar from "../components/Navbar";
import Filter from "../components/Filter";

import { useProduct } from "../components/context";
import { Pagination } from "../components/Pagination";
import Product from "../components/Product/Product";
import { Featured } from "../components/Featured";

export default function Home({ products }) {
  const {
    categoryType,
    sort,
    minPrice,
    maxPrice,
    setCartItem,
    onSort,
    setCartOpen,
  } = useProduct();

  const matchesCategory = (product) => categoryType.includes(product.category);

  const matchesPrice = (product) => {
    return product.price <= maxPrice && product.price >= minPrice;
  };

  const sortProducts = (sortBy) => (a, b) =>
    a[sortBy] > b[sortBy] ? 1 : a[sortBy] < b[sortBy] ? -1 : 0;

  const [toggle, setToggle] = useState(true);

  const toggleTime = (a, b) => {
    return toggle ? a.id - b.id : b.id - a.id;
  };

  const isFeatured = (product) => {
    return product.featured == true;
  };

  const notFeatured = (product) => {
    return product.featured == false;
  };

  const filteredProducts = products.data
    .filter(matchesCategory)
    .filter(matchesPrice)
    .sort(sortProducts(sort))
    .sort(toggleTime)
    .filter(notFeatured);

  const [featured] = products.data.filter(isFeatured);

  const getItemId = (id) => {
    const product = products.data.find((item) => item.id === id);
    return product;
  };

  const addToCart = (id) => {
    // copy product
    const tempProducts = [...products.data];

    // get the index of curent product
    const index = tempProducts.indexOf(getItemId(id));

    // set the product
    const product = tempProducts[index];

    product.inCart = true;
    product.count = 1;
    const price = product.price;
    product.total = price;

    setCartItem(product);
    setCartOpen(true);
  };

  // pagination
  const [currentPage, setCurrentPage] = useState(1);
  const [postsPerPage, setPostsPerPage] = useState(6);

  const indexOfLastPost = currentPage * postsPerPage;
  const indexOfFirstPost = indexOfLastPost - postsPerPage;
  const paginatedData = filteredProducts.slice(
    indexOfFirstPost,
    indexOfLastPost
  );

  const paginate = (value) => {
    setCurrentPage(value);
  };

  const nextPage = () => {
    setCurrentPage((currentPage) => currentPage + 1);
  };

  const prevPage = () => {
    setCurrentPage((currentPage) => currentPage - 1);
  };

  return (
    <div>
      <Head>
        <title>Art Store</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Navbar />

      <Featured data={featured} addToCart={addToCart} />

      <div className="container">
        <hr />

        <div className="row my-4">
          <div className="col-lg-6">
            <h3>
              Photography /{" "}
              <span className="font-weight-light text-secondary">
                Premium Photos
              </span>
            </h3>
          </div>

          <div className="col-lg-6 text-right">
            <div className="row align-items-center no-gutters">
              <div className="col">
                <p className="text-secondary my-0">
                  <span onClick={() => setToggle((toggle) => !toggle)}>
                    <svg
                      width="15"
                      height="15"
                      viewBox="0 0 15 15"
                      fill="none"
                      xmlns="http://www.w3.org/2000/svg"
                    >
                      <g clipPath="url(#clip0)">
                        <path
                          d="M3.64807 14.3734V1.5347L5.90435 3.79098C5.97793 3.86456 6.07296 3.90134 6.17106 3.90134C6.26916 3.90134 6.36419 3.86456 6.43777 3.79098C6.58492 3.64383 6.58492 3.40778 6.43777 3.26063L3.54077 0.363637C3.39976 0.222619 3.15144 0.222619 3.01042 0.363637L0.110362 3.26063C-0.0367873 3.40778 -0.0367873 3.64383 0.110362 3.79098C0.257511 3.93813 0.493562 3.93813 0.640711 3.79098L2.897 1.5347V14.3734C2.897 14.5819 3.0656 14.7505 3.27407 14.7505C3.47946 14.7474 3.64807 14.5788 3.64807 14.3734Z"
                          fill="black"
                        />
                        <path
                          d="M11.4592 14.6367C11.5328 14.7103 11.6279 14.7471 11.726 14.7471C11.8241 14.7471 11.9191 14.7103 11.9927 14.6367L14.8897 11.7397C15.0368 11.5926 15.0368 11.3565 14.8897 11.2094C14.7425 11.0622 14.5065 11.0622 14.3593 11.2094L12.103 13.4657V0.626917C12.103 0.418456 11.9344 0.249847 11.726 0.249847C11.5175 0.249847 11.3489 0.418456 11.3489 0.626917V13.4657L9.09567 11.2094C8.94852 11.0622 8.71247 11.0622 8.56532 11.2094C8.41817 11.3565 8.41817 11.5926 8.56532 11.7397L11.4592 14.6367Z"
                          fill="black"
                        />
                      </g>
                      <defs>
                        <clipPath id="clip0">
                          <rect width="15" height="15" fill="white" />
                        </clipPath>
                      </defs>
                    </svg>
                  </span>{" "}
                  Sort By{" "}
                </p>
              </div>

              <div className="col-3">
                <select
                  name=""
                  className="form-control border-0"
                  id="sort"
                  onChange={(e) => onSort(e.target.value)}
                  value={sort}
                >
                  {/* <option value="category">Category</option> */}
                  <option value="name">Alphabetically</option>
                  <option value="price">Price</option>
                </select>
              </div>
            </div>
          </div>
        </div>

        <div className="row">
          <div className="col-lg-3">
            <Filter />
          </div>
          <div className="col-lg-9">
            <div className="row">
              {paginatedData.map((product, index) => (
                <Product product={product} key={index} addToCart={addToCart} />
              ))}
            </div>

            <Pagination
              postsPerPage={postsPerPage}
              totalPosts={filteredProducts.length}
              currentPage={currentPage}
              paginate={paginate}
              nextPage={nextPage}
              prevPage={prevPage}
            />
          </div>
        </div>
      </div>
    </div>
  );
}

// This function gets called at build time
export async function getStaticProps() {
  // Call an external API endpoint to get posts
  const res = await fetch("http://localhost:3000/api/products");
  const products = await res.json();

  // By returning { props: { posts } }, the Blog component
  // will receive `posts` as a prop at build time
  return {
    props: {
      products,
    },
  };
}
